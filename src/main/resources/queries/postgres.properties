find.user.by.email=select id, name, surname, email, role, is_enabled from \"user\" where email = ?
find.user.by.id=select id, name, surname, email, role, is_enabled from \"user\" where id = ?
find.user.by.email.with.password=select id, password, name, surname, email, role, is_enabled from \"user\" where email = ?
update.user.by.id=update \"user\" set email = ?, name = ?, surname = ?, role = ?, is_enabled = ? WHERE id = ?;
get.all.actions = select * from action
find.actions.by.name = select * from action where LOWER(name) = LOWER(?)
insert.user = INSERT INTO \"user\" (email, password, name, surname, role, is_enabled) VALUES (?, ?, ?, ?, ?, ?)
count.users=select count(id) from \"user\"
get.users=select id, name, surname, email, role, is_enabled from \"user\" where name like ? and surname like ? and email like ? and role like ?
get.user.email.by.id=SELECT email FROM \"user\" WHERE id = ?
get.number.of.actions = SELECT count(*) from action;
get.data.set.by.id = select * from data_set where id = ?;
get.data.entry.by.data.set.id = select * from data_entry where data_set_id = ?;
update.data.set.by.name = update data_set set name = ? where id = ?;
update.or.insert.data.entry = insert into data_entry values(?,?,?) on conflict(id) do update set value = excluded.value;
update.or.insert.data.entry.default = insert into data_entry values(DEFAULT,?,?);
delete.data.entry.by.id = delete from data_entry where id = ?;
find.project.all=SELECT * FROM \"project\" ORDER BY %s %s LIMIT %d OFFSET %d
find.compound.all=SELECT * FROM \"compound\" ORDER BY %s %s LIMIT %d OFFSET %d
insert.test.scenario=INSERT INTO test_scenario(name) VALUES ('%s')
update.test.scenario.by.id=UPDATE test_scenario SET name='%s' WHERE id=%d

get.datasets=select id, name from \"data_set\" order by name
get.data.entries.by.dataset.id=select id, value from \"data_entry\" where data_set_id=?
get.test.scenarios=select id, name from \"test_scenario\"

get.action.instance.by.test.case=select action_instance.id as id, action_instance.test_scenario_id as test_scenario_id, action_instance.priority, compound_inst.priority as compound_priority, compound_inst.compound_id, compound_inst.description as compound_description, compound_inst.name as compound_name, compound_instance_id, variable_id, variable_name, action_variable.action_id, action_name, action_description from action_instance left outer join (select compound_instance.id, compound_id, priority, c.name, c.description from compound_instance join compound c on compound_instance.compound_id = c.id) compound_inst on action_instance.compound_instance_id = compound_inst.id join (select variable.id as variable_id, variable.name as variable_name, action_id, a.name as action_name, a.description as action_description from variable join action a on a.id = variable.action_id) action_variable on action_variable.action_id = action_instance.action_id where action_instance.test_scenario_id = ?
insert.test.case=insert into test_case(name, user_id, project_id, data_set_id, test_scenario_id)  values(?, ?, ?, ?, ?)
insert.variable.value=insert into variable_value(variable_id, action_instance_id, data_entry_id, test_case_id) values (?, ?, ?, ?)






