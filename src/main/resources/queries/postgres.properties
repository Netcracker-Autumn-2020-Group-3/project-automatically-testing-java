find.user.by.email=select id, name, surname, email, role, is_enabled from \"user\" where email = ?
find.user.by.id=select id, name, surname, email, role, is_enabled from \"user\" where id = ?
find.user.by.email.with.password=select id, password, name, surname, email, role, is_enabled from \"user\" where email = ?
update.user.by.id=update \"user\" set email = ?, name = ?, surname = ?, role = ?, is_enabled = ? WHERE id = ?;
get.all.actions = select * from action
find.actions.by.name = select * from action where LOWER(name) = LOWER(?)
find.action.all.with.id.name=SELECT id, name, is_void FROM action
insert.user = INSERT INTO \"user\" (email, password, name, surname, role, is_enabled) VALUES (?, ?, ?, ?, ?, ?)
find.compound.by.id = SELECT id, name, description FROM compound WHERE id = ?
find.comp.action.by.id = SELECT action_id, priority FROM compound_action WHERE compound_id = ? ORDER BY priority
update.compound = UPDATE compound SET "name" = ?, description = ? WHERE id = ?;
insert.comp.action.list = "INSERT INTO compound_action (id, action_id, priority) VALUES (?, ?, ?)"

count.users=select count(id) from \"user\"
get.users=select id, name, surname, email, role, is_enabled from \"user\" where name like ? and surname like ? and email like ? and role like ?
get.user.email.by.id=SELECT email FROM \"user\" WHERE id = ?
get.number.of.actions = SELECT count(*) from action;
get.data.set.by.id = select * from data_set where id = ?;
get.data.entry.by.data.set.id = select * from data_entry where data_set_id = ?;
update.data.set.by.name = update data_set set name = ? where id = ?;
update.data.entry = update data_entry set value = ?, key = ? where id = ?;
insert.data.entry.default = insert into data_entry (data_set_id,value,key) values (?, ?, ?);
delete.data.entry.by.id = delete from data_entry where id = ?;

find.project.all=SELECT * FROM \"project\" ORDER BY %s %s LIMIT %d OFFSET %d

find.compound.all=SELECT * FROM compound ORDER BY %s LIMIT %d OFFSET %d
find.compound.all.with.id.name=SELECT id, name FROM compound
find.compound.quantity=SELECT count(*) FROM compound;

insert.test.scenario=INSERT INTO test_scenario(name) VALUES (?) returning id
update.test.scenario.by.id=UPDATE test_scenario SET name=?, is_archived=? WHERE id=?
select.test.scenario.exist=SELECT EXISTS(SELECT id FROM test_scenario WHERE name=?)

insert.compound.instance=INSERT INTO compound_instance(compound_id, test_scenario_id, priority) VALUES(?,?,?) returning id
insert.action.instance.with.compound.instance.id=INSERT INTO action_instance(test_scenario_id, compound_instance_id, action_id, priority, context_instance_name) VALUES(?,?,?,?,?)
insert.action.instance.without.compound.instance.id=INSERT INTO action_instance(test_scenario_id, action_id, priority, context_instance_name) VALUES(?,?,?,?)

get.datasets=select id, name from \"data_set\" order by name
get.data.entries.by.dataset.id=select id, value, key, data_set_id from \"data_entry\" where data_set_id=?
get.test.scenarios=select id, name from \"test_scenario\"

get.action.instance.by.test.case=select action_instance.id as action_instance_id, action_instance.test_scenario_id as test_scenario_id, action_instance.priority, compound_inst.priority as compound_priority, compound_inst.compound_id, compound_inst.description as compound_description, compound_inst.name as compound_name, compound_instance_id, variable_id, variable_name, action_variable.action_id, action_name, action_description from action_instance left outer join (select compound_instance.id, compound_id, priority, c.name, c.description from compound_instance join compound c on compound_instance.compound_id = c.id) compound_inst on action_instance.compound_instance_id = compound_inst.id join (select variable.id as variable_id, variable.name as variable_name, action_id, a.name as action_name, a.description as action_description from variable join action a on a.id = variable.action_id) action_variable on action_variable.action_id = action_instance.action_id where action_instance.test_scenario_id = ?
insert.test.case=insert into test_case(name, user_id, project_id, data_set_id, test_scenario_id)  values(?, ?, ?, ?, ?)
insert.variable.value=insert into variable_value(variable_id, action_instance_id, data_entry_id, test_case_id) values (?, ?, ?, ?)

insert.compound.actions = insert into compound_action values(DEFAULT,?,?,?);
get.compound.action.with.action.id.and.priority=SELECT action_id, priority FROM compound_action WHERE compound_id=?

check.if.compound.name.exist = select count(name) > 0 from compound where name = ?;
insert.compound = insert into compound values(DEFAULT,?,?);
get.project.by.id=select * from project where id=?
count.projects=select count(id) from project
insert.project=insert into project (name, link, is_archived, user_id) values  (?, ?, ?, ?)

delete.data.set=delete from data_set where data_set.id = ?;
delete.data.entry=delete from data_entry where data_entry.data_set_id = ?;

get.test.case.steps=select variable_value.id as variable_value_id, variable_value.test_case_id as test_case_id, tc.project_id as test_case_project_id, tc.name as test_case_name, tc.data_set_id   as test_case_data_set_id, tc.test_scenario_id as test_case_test_scenario_id, tc.user_id as test_case_user_id, tc.project_link as test_case_project_link, tc.project_name as test_case_project_name, de.id as data_entry_id, de.data_set_id   as data_set_id, de.value  as data_entry_value, de.key as data_entry_key, ai.action_instance_id, ai.test_scenario_id, ai.priority, ai.compound_instance_id, compound_priority, compound_id, compound_description, compound_name, ai.action_id as action_id, action_name, action_description, v.id as variable_id, v.name as variable_name from variable_value join data_entry de on variable_value.data_entry_id = de.id join variable v on v.id = variable_value.variable_id join (select action_instance.id as action_instance_id, action_instance.test_scenario_id as test_scenario_id, action_instance.priority, compound_inst.priority as compound_priority, compound_inst.compound_id, compound_inst.description as compound_description, compound_inst.name as compound_name, compound_instance_id, a.name as action_name, a.description as action_description, action_id from action_instance left outer join (select compound_instance.id, compound_id, priority, c.name, c.description from compound_instance join compound c on compound_instance.compound_id = c.id) compound_inst on action_instance.compound_instance_id = compound_inst.id join action a on action_instance.action_id = a.id) ai on ai.action_instance_id = variable_value.action_instance_id join (select test_case.id, test_case.project_id, test_case.name, test_case.data_set_id, test_case.test_scenario_id, test_case.user_id, p.link as project_link, p.name as project_name from test_case join project p on test_case.project_id = p.id) tc on variable_value.test_case_id = tc.id where test_case_id = ?
get.test.scenario.page= SELECT id, name FROM "test_scenario" where name like ?
count.test.scenario = SELECT count(id) from "test_scenario"


get.test.case.page= SELECT id, name FROM "test_case" where name like ?
count.test.cases = SELECT count(id) from "test_case"
get.compound.by.id = select * from compound where id = ?;
get.compound.actions = select c.id,c.name,a.name,a.description,ca.priority from compound_action ca join compound c on c.id = ca.compound_id join action a on a.id = ca.action_id where c.id = ? order by priority;

dashboard.top.subscribed.test.cases=SELECT subscr.*, test_case.name as test_case_name, project.id as project_id, project.name as project_name FROM (SELECT test_case_id, count(test_case_id) as quantity FROM subscription GROUP BY test_case_id ORDER BY quantity DESC LIMIT 5 ) as subscr INNER JOIN test_case ON subscr.test_case_id = test_case.id INNER JOIN project ON test_case.project_id = project.id ORDER BY subscr.quantity DESC

update.variable.value.data.entry=update variable_value set data_entry_id=? where id=?
update.test.case.name=update test_case set name=? where id=?
get.project.dto.by.id=select user_id, u.name as user_name, u.surname as user_surname, u.email as user_email, u.is_enabled as user_is_enabled, u.role as user_role, project.id, project.name, project.link, project.is_archived from \"user\" u join project on u.id = project.user_id where project.id = ?
update.project=update project set name=?, link=? where id=?
archive.project=update project set is_archived=true where id=?
