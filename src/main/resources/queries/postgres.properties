find.user.by.email=select id, name, surname, email, role, is_enabled from \"user\" where email = ?
find.user.by.id=select id, name, surname, email, role, is_enabled from \"user\" where user_id = ?
find.user.by.email.with.password=select id, password, name, surname, email, role, is_enabled from \"user\" where email = ?
update.user.by.id=update \"user\" set email = ?, name = ?, surname = ?, role = ?, is_enabled = ? WHERE user_id = ?;
get.all.actions = select * from action;
find.actions.by.name = select * from action where name = LOWER(?);
insert.user = INSERT INTO \"user\" (email, password, name, surname, role, is_enabled) VALUES (?, ?, ?, ?, ?, ?)

count.users=select count(id) from \"user\"
get.users=select id, name, surname, email, role, is_enabled from \"user\" where name like ? and surname like ? and email like ? and role like ?
get.user.email.by.id=SELECT email FROM \"user\" WHERE id = ?
get.number.of.actions = SELECT count(*) from action;
get.data.set.by.id = select * from data_set where id = ?;
get.data.entry.by.data.set.id = select * from data_entry where data_set_id = ?;
update.data.set.by.name = update data_set set name = ? where id = ?;
update.or.insert.data.entry = insert into data_entry values(?,?,?) on conflict(id) do update set value = excluded.value;
update.or.insert.data.entry.default = insert into data_entry values(DEFAULT,?,?);
delete.data.entry.by.id = delete from data_entry where id = ?;

find.project.all=SELECT * FROM \"project\" ORDER BY %s %s LIMIT %d OFFSET %d
find.compound.all=SELECT * FROM \"compound\" ORDER BY %s %s LIMIT %d OFFSET %d
insert.test.scenario=INSERT INTO test_scenario(name) VALUES ('%s')
update.test.scenario.by.id=UPDATE test_scenario SET name='%s' WHERE id=%d


